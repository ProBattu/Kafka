# kafka_broker
---
startDelaySeconds: 120
lowercaseOutputName: true
lowercaseOutputLabelNames: true
blacklistObjectNames:
  - "kafka.consumer:type=*,id=*"
  - "kafka.consumer:type=*,client-id=*"
  - "kafka.consumer:type=*,client-id=*,node-id=*"
  - "kafka.producer:type=*,id=*"
  - "kafka.producer:type=*,client-id=*"
  - "kafka.producer:type=*,client-id=*,node-id=*"
  - "kafka.*:type=kafka-metrics-count,*"
  # This will ignore the admin client metrics from Kafka Brokers and will blacklist certain metrics
  # that do not make sense for ingestion.
  # "kafka.admin.client:type=*, node-id=*, client-id=*"
  # "kafka.admin.client:type=*, client-id=*"
  # "kafka.admin.client:type=*, id=*"
  - "kafka.admin.client:*"
  - "kafka.server:type=*,cipher=*,protocol=*,listener=*,networkProcessor=*"
  - "kafka.server:type=*"
rules:
  # This is by far the biggest contributor to the number of sheer metrics being produced.
  # Always keep it on the top for the case of probability when so many metrics will hit the first condition and exit.
  # "kafka.cluster:type=*, name=*, topic=*, partition=*"
  # "kafka.log:type=*,name=*, topic=*, partition=*"
  - pattern: kafka.(\w+)<type=(.+), name=(.+), topic=(.+), partition=(.+)><>Value
    name: kafka_$1_$2_$3
    type: GAUGE
    labels:
      topic: "$4"
      partition: "$5"
  # "kafka.server:type=*,name=*, client-id=*, topic=*, partition=*"
  - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value
    name: kafka_server_$1_$2
    type: GAUGE
    labels:
      clientId: "$3"
      topic: "$4"
      partition: "$5"
  - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value
    name: kafka_server_$1_$2
    type: GAUGE
    labels:
      clientId: "$3"
      broker: "$4:$5"
  # "kafka.network:type=*, name=*, request=*, error=*"
  # "kafka.network:type=*, name=*, request=*, version=*"
  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>(Count|Value)
    name: kafka_$1_$2_$3
    labels:
      "$4": "$5"
      "$6": "$7"
  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*), (.+)=(.+)><>(\d+)thPercentile
    name: kafka_$1_$2_$3
    type: GAUGE
    labels:
      "$4": "$5"
      "$6": "$7"
      quantile: "0.$8"
  # "kafka.rest:type=*, topic=*, partition=*, client-id=*"
  # "kafka.rest:type=*, cipher=*, protocol=*, client-id=*"
  - pattern: kafka.(\w+)<type=(.+), (.+)=(.+), (.+)=(.+), (.+)=(.+)><>Value
    name: kafka_$1_$2
    labels:
      "$3": "$4"
      "$5": "$6"
      "$7": "$8"
  # Count and Value
  # "kafka.server:type=*, name=*, topic=*"
  # "kafka.server:type=*, name=*, clientId=*"
  # "kafka.server:type=*, name=*, delayedOperation=*"
  # "kafka.server:type=*, name=*, fetcherType=*"
  # "kafka.network:type=*, name=*, networkProcessor=*"
  # "kafka.network:type=*, name=*, processor=*"
  # "kafka.network:type=*, name=*, request=*"
  # "kafka.network:type=*, name=*, listener=*"
  # "kafka.log:type=*, name=*, logDirectory=*"
  # "kafka.log:type=*, name=*, op=*"
  # "kafka.rest:type=*, node-id=*, client-id=*"
  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>(Count|Value)
    name: kafka_$1_$2_$3
    labels:
      "$4": "$5"
  # "kafka.consumer:type=*, topic=*, client-id=*"
  # "kafka.producer:type=*, topic=*, client-id=*"
  # "kafka.rest:type=*, topic=*, client-id=*"
  # "kafka.server:type=*, broker-id=*, fetcher-id=*"
  # "kafka.server:type=*, listener=*, networkProcessor=*"
  - pattern: kafka.(\w+)<type=(.+), (.+)=(.+), (.+)=(.+)><>(Count|Value)
    name: kafka_$1_$2
    labels:
      "$3": "$4"
      "$5": "$6"
  # "kafka.network:type=*, name=*"
  # "kafka.server:type=*, name=*"
  # "kafka.controller:type=*, name=*"
  # "kafka.databalancer:type=*, name=*"
  # "kafka.log:type=*, name=*"
  # "kafka.utils:type=*, name=*"
  - pattern: kafka.(\w+)<type=(.+), name=(.+)><>(Count|Value)
    name: kafka_$1_$2_$3
  # "kafka.producer:type=*, client-id=*"
  # "kafka.producer:type=*, id=*"
  # "kafka.rest:type=*, client-id=*"
  # "kafka.rest:type=*, http-status-code=*"
  # "kafka.server:type=*, BrokerId=*"
  # "kafka.server:type=*, listener=*"
  # "kafka.server:type=*, id=*"
  - pattern: kafka.(\w+)<type=(.+), (.+)=(.+)><>Value
    name: kafka_$1_$2
    labels:
      "$3": "$4"

  - pattern: kafka.server<type=KafkaRequestHandlerPool, name=RequestHandlerAvgIdlePercent><>OneMinuteRate
    name: kafka_server_kafkarequesthandlerpool_requesthandleravgidlepercent_total
    type: GAUGE
  # "kafka.server:type=*, listener=*, networkProcessor=*, clientSoftwareName=*, clientSoftwareVersion=*"
  - pattern: kafka.server<type=socket-server-metrics, clientSoftwareName=(.+), clientSoftwareVersion=(.+), listener=(.+), networkProcessor=(.+)><>connections
    name: kafka_server_socketservermetrics_connections
    type: GAUGE
    labels:
      client_software_name: "$1"
      client_software_version: "$2"
      listener: "$3"
      network_processor: "$4"
  - pattern: "kafka.server<type=socket-server-metrics, listener=(.+), networkProcessor=(.+)><>(.+):"
    name: kafka_server_socketservermetrics_$3
    type: GAUGE
    labels:
      listener: "$1"
      network_processor: "$2"
  # "kafka.coordinator.group:type=*, name=*"
  # "kafka.coordinator.transaction:type=*, name=*"
  - pattern: kafka.coordinator.(\w+)<type=(.+), name=(.+)><>(Count|Value)
    name: kafka_coordinator_$1_$2_$3
  # Percentile
  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*)><>(\d+)thPercentile
    name: kafka_$1_$2_$3
    type: GAUGE
    labels:
      "$4": "$5"
      quantile: "0.$6"
  - pattern: kafka.(\w+)<type=(.+), name=(.+)><>(\d+)thPercentile
    name: kafka_$1_$2_$3
    type: GAUGE
    labels:
      quantile: "0.$4"
  # Additional Rules for Confluent Server Metrics
  # 'confluent.metadata:type=*, name=*, topic=*, partition=*'
  - pattern: confluent.(\w+)<type=(.+), (.+)=(.+), (.+)=(.+), (.+)=(.+)><>Value
    name: confluent_$1_$2
    type: GAUGE
    labels:
      "$3": "$4"
      "$5": "$6"
      "$7": "$8"
  # 'confluent.metadata.service:type=*, node-id=*, client-id=*'
  - pattern: confluent.(.+)<type=(.+), (.+)=(.+), (.+)=(.+)><>Value
    name: confluent_$1_$2
    type: GAUGE
    labels:
      "$3": "$4"
      "$5": "$6"
  # 'confluent.metadata.service:type=*, client-id=*'
  # 'confluent.metadata.service:type=*, id=*'
  # 'confluent.metadata:type=*, name=*'
  # 'confluent.license:type=*, name=*'
  - pattern: confluent.(.+)<type=(.+), (.+)=(.+)><>Value
    name: confluent_$1_$2
    type: GAUGE
    labels:
      "$3": "$4"

  # Quotas
  - pattern : 'kafka.server<type=(Produce|Fetch|Request), user=(.+), client-id=(.+)><>(.+):'
    name: kafka_server_$1_$4
    type: GAUGE
    labels:
      user: "$2"
      client-id: "$3"
  
  - pattern : 'kafka.server<type=(Produce|Fetch|Request), user=(.+)><>(.+):'
    name: kafka_server_$1_$3
    type: GAUGE
    labels:
      user: "$2"
  
  - pattern : 'kafka.server<type=(Produce|Fetch|Request), client-id=(.+)><>(.+):'
    name: kafka_server_$1_$3
    type: GAUGE
    labels:
      client-id: "$2"

# kafka_client
---
lowercaseOutputName: true
lowercaseOutputLabelNames: true
whitelistObjectNames:
  - "kafka.consumer:*"
  - "kafka.producer:*"
blacklistObjectNames:
  - "kafka.admin.client:*"
  - "kafka.consumer:type=*,id=*"
  - "kafka.producer:type=*,id=*"
  - "kafka.*:type=kafka-metrics-count,*"
rules:
  # "kafka.consumer:type=app-info,client-id=*"
  # "kafka.producer:type=app-info,client-id=*"
  - pattern: "kafka.(.+)<type=app-info, client-id=(.+)><>(.+): (.+)"
    value: 1
    name: kafka_$1_app_info
    labels:
      client_type: $1
      client_id: $2
      $3: $4
    type: UNTYPED
  # "kafka.consumer:type=consumer-metrics,client-id=*, protocol=*, cipher=*"
  # "kafka.consumer:type=type=consumer-fetch-manager-metrics,client-id=*, topic=*, partition=*"
  # "kafka.producer:type=producer-metrics,client-id=*, protocol=*, cipher=*"
  - pattern: "kafka.(.+)<type=(.+), (.+)=(.+), (.+)=(.+), (.+)=(.+)><>(.+):"
    name: kafka_$1_$2_$9
    type: GAUGE
    labels:
      client_type: $1
      $3: "$4"
      $5: "$6"
      $7: "$8"
  # "kafka.consumer:type=consumer-node-metrics,client-id=*, node-id=*"
  # "kafka.consumer:type=consumer-fetch-manager-metrics,client-id=*, topic=*"
  # "kafka.producer:type=producer-node-metrics,client-id=*, node-id=*"
  # "kafka.producer:type=producer-topic-metrics,client-id=*, topic=*"
  - pattern: "kafka.(.+)<type=(.+), (.+)=(.+), (.+)=(.+)><>(.+):"
    name: kafka_$1_$2_$7
    type: GAUGE
    labels:
      client_type: $1
      $3: "$4"
      $5: "$6"
  # "kafka.consumer:type=consumer-fetch-manager-metrics,client-id=*"
  # "kafka.consumer:type=consumer-metrics,client-id=*"
  # "kafka.producer:type=producer-metrics,client-id=*"
  - pattern: "kafka.(.+)<type=(.+), (.+)=(.+)><>(.+):"
    name: kafka_$1_$2_$5
    type: GAUGE
    labels:
      client_type: $1
      $3: "$4"
  - pattern: "kafka.(.+)<type=(.+)><>(.+):"
    name: kafka_$1_$2_$3
    labels:
      client_type: $1

# kafka_connect
---
lowercaseOutputName: true
lowercaseOutputLabelNames: true
whitelistObjectNames:
  # Engine Application Versioning Info
  - kafka.connect:type=app-info,client-id=*
  # Connect Worker Rebalancing info
  - kafka.connect:type=connect-worker-rebalance-metrics
  # Connect Co-ordinator Info
  - kafka.connect:type=connect-coordinator-metrics,*
  - kafka.connect:type=connect-metrics,*
  # Worker level metrics for the aggregate as well as per connector level
  - kafka.connect:type=connect-worker-metrics
  - kafka.connect:type=connect-worker-metrics,*
  # Engine Connector Versioning Info
  - kafka.connect:type=connector-metrics,*
  # Task level metrics for every connector running in the current node.
  - kafka.connect:type=*-task-metrics,*
  - kafka.connect:type=task-error-metrics,*
  #  Confluent Replicator JMX Stats
  - confluent.replicator:type=confluent-replicator-task-metrics,*
  # The two lines below are used to pull the Kafka Client Producer & consumer metrics from Connect Workers.
  # If you care about Producer/Consumer metrics for Connect, please uncomment 2 lines below.
  # Please note that this increases the scrape duration by about 1-2 seconds as it needs to parse a lot of data.
  - "kafka.consumer:*"
  - "kafka.producer:*"
blacklistObjectNames:
  # This will ignore the admin client metrics from KSQL server and will blacklist certain metrics
  # that do not make sense for ingestion.
  - "kafka.admin.client:*"
  - "kafka.consumer:type=*,id=*"
  - "kafka.producer:type=*,id=*"
  - "kafka.producer:client-id=confluent.monitoring*,*"
  - "kafka.*:type=kafka-metrics-count,*"
rules:
  # "kafka.schema.registry:type=app-info,id=*"
  - pattern: "kafka.connect<type=app-info, client-id=(.+)><>(.+): (.+)"
    name: "kafka_connect_app_info"
    value: 1
    labels:
      client-id: "$1"
      $2: "$3"
    type: UNTYPED
  # kafka.connect:type=connect-worker-rebalance-metrics
  - pattern: "kafka.connect<type=connect-worker-rebalance-metrics><>([^:]+)"
    name: "kafka_connect_connect_worker_rebalance_metrics_$1"
  # kafka.connect:type=connect-coordinator-metrics,client-id=*
  # kafka.connect:type=connect-metrics,client-id=*
  - pattern: "kafka.connect<type=(.+), client-id=(.+)><>([^:]+)"
    name: kafka_connect_$1_$3
    labels:
      client_id: $2
  # kafka.connect:type=connect-worker-metrics
  - pattern: "kafka.connect<type=connect-worker-metrics><>([^:]+)"
    name: kafka_connect_connect_worker_metrics_$1
    labels:
      connector: "aggregate"
  # kafka.connect:type=connect-worker-metrics,connector=*
  - pattern: "kafka.connect<type=connect-worker-metrics, connector=(.+)><>([^:]+)"
    name: kafka_connect_connect_worker_metrics_$2
    labels:
      connector: $1
  # kafka.connect:type=connector-metrics,connector=*
  - pattern: "kafka.connect<type=connector-metrics, connector=(.+)><>(.+): (.+)"
    value: 1
    name: kafka_connect_connector_metrics
    labels:
      connector: $1
      $2: $3
    type: UNTYPED
  # kafka.connect:type=*-task-metrics,*
  # kafka.connect:type=source-task-metrics,connector=*,task=*
  # kafka.connect:type=sink-task-metrics,connector=*,task=*
  # kafka.connect:type=connector-task-metrics,connector=*,task=*
  - pattern: "kafka.connect<type=(.+)-task-metrics, connector=(.+), task=(\\d+)><>(.+): (.+)"
    name: kafka_connect_$1_task_metrics_$4
    labels:
      connector: "$2"
      task: "$3"
  # kafka.connect:type=task-error-metrics,*
  # kafka.connect:type=task-error-metrics,connector=*,task=*
  - pattern: "kafka.connect<type=task-error-metrics, connector=(.+), task=(\\d+)><>([^:]+)"
    name: kafka_connect_task_error_metrics_$3
    labels:
      connector: "$1"
      task: "$2"
  # confluent.replicator:type=confluent-replicator-task-metrics,* : confluent-replicator-task-topic-partition-*: Number Values
  - pattern: "confluent.replicator<type=confluent-replicator-task-metrics, confluent-replicator-(.*)=(.+), confluent-replicator-(.+)=(.+), confluent-replicator-(.+)=(.+), confluent-replicator-(.+)=(.+)><>confluent-replicator-task-topic-partition-(.*): (.*)"
    name: confluent_replicator_task_metrics_$9
    labels:
      $1: "$2"
      $3: "$4"
      $5: "$6"
      $7: "$8"
  # confluent.replicator:type=confluent-replicator-task-metrics,* : Strings
  - pattern: "confluent.replicator<type=confluent-replicator-task-metrics, confluent-replicator-(.*)=(.+), confluent-replicator-(.+)=(.+), confluent-replicator-(.+)=(.+), confluent-replicator-(.+)=(.+)><>(confluent-replicator-destination-cluster|confluent-replicator-source-cluster|confluent-replicator-destination-topic-name): (.*)"
    name: confluent_replicator_task_metrics_info
    value: 1
    labels:
      $1: "$2"
      $3: "$4"
      $5: "$6"
      $7: "$8"
      $9: "$10"
  # "kafka.consumer:type=app-info,client-id=*"
  # "kafka.producer:type=app-info,client-id=*"
  - pattern: "kafka.(.+)<type=app-info, client-id=(.+)><>(.+): (.+)"
    value: 1
    name: kafka_$1_app_info
    labels:
      client_type: $1
      client_id: $2
      $3: $4
    type: UNTYPED
  # "kafka.consumer:type=consumer-metrics,client-id=*, protocol=*, cipher=*"
  # "kafka.consumer:type=type=consumer-fetch-manager-metrics,client-id=*, topic=*, partition=*"
  # "kafka.producer:type=producer-metrics,client-id=*, protocol=*, cipher=*"
  - pattern: "kafka.(.+)<type=(.+), (.+)=(.+), (.+)=(.+), (.+)=(.+)><>(.+):"
    name: kafka_$1_$2_$9
    type: GAUGE
    labels:
      client_type: $1
      $3: "$4"
      $5: "$6"
      $7: "$8"
  # "kafka.consumer:type=consumer-node-metrics,client-id=*, node-id=*"
  # "kafka.consumer:type=consumer-fetch-manager-metrics,client-id=*, topic=*"
  # "kafka.producer:type=producer-node-metrics,client-id=*, node-id=*"
  # "kafka.producer:type=producer-topic-metrics,client-id=*, topic=*"
  - pattern: "kafka.(.+)<type=(.+), (.+)=(.+), (.+)=(.+)><>(.+):"
    name: kafka_$1_$2_$7
    type: GAUGE
    labels:
      client_type: $1
      $3: "$4"
      $5: "$6"
  # "kafka.consumer:type=consumer-fetch-manager-metrics,client-id=*"
  # "kafka.consumer:type=consumer-metrics,client-id=*"
  # "kafka.producer:type=producer-metrics,client-id=*"
  - pattern: "kafka.(.+)<type=(.+), (.+)=(.+)><>(.+):"
    name: kafka_$1_$2_$5
    type: GAUGE
    labels:
      client_type: $1
      $3: "$4"
  - pattern: "kafka.(.+)<type=(.+)><>(.+):"
    name: kafka_$1_$2_$3
    labels:
      client_type: $1

# kafka_streams
---
lowercaseOutputName: true
lowercaseOutputLabelNames: true
whitelistObjectNames:
  - kafka.streams:*
  # The two lines below are used to pull the Kafka Client Producer & consumer metrics from Kafka Streams Client.
  # If you care about Producer/Consumer metrics for Kafka Streams, please uncomment 2 lines below.
  # Please note that this increases the scrape duration by about 1-2 seconds as it needs to parse a lot of data.
  - "kafka.consumer:*"
  - "kafka.producer:*"
blacklistObjectNames:
  - kafka.streams:type=kafka-metrics-count
  - "kafka.admin.client:*"
  - "kafka.consumer:type=*,id=*"
  - "kafka.producer:type=*,id=*"
  - "kafka.*:type=kafka-metrics-count,*"
rules:
  # kafka.streams:type=stream-processor-node-metrics,processor-node-id=*,task-id=*,thread-id=*
  # kafka.streams:type=stream-record-cache-metrics,record-cache-id=*,task-id=*,thread-id=*
  # kafka.streams:type=stream-state-metrics,rocksdb-state-id=*,task-id=*,thread-id=*
  # kafka.streams:type=stream-state-metrics,rocksdb-state-id=*,task-id=*,thread-id=*
  - pattern: "kafka.streams<type=(.+), thread-id=(.+), task-id=(.+), (.+)=(.+)><>(.+):"
    name: kafka_streams_$1_$6
    type: GAUGE
    labels:
      thread_id: "$2"
      task_id: "$3"
      $4: "$5"
  # kafka.streams:type=stream-task-metrics,task-id=*,thread-id=*
  - pattern: "kafka.streams<type=(.+), thread-id=(.+), task-id=(.+)><>(.+):"
    name: kafka_streams_$1_$4
    type: GAUGE
    labels:
      thread_id: "$2"
      task_id: "$3"
  # kafka.streams:type=stream-metrics,client-id=*
  - pattern: "kafka.streams<type=stream-metrics, (.+)=(.+)><>(state|alive-stream-threads|commit-id|version|application-id): (.+)"
    name: kafka_streams_stream_metrics
    value: 1
    type: UNTYPED
    labels:
      $1: "$2"
      $3: "$4"
  # kafka.streams:type=stream-thread-metrics,thread-id=*
  - pattern: "kafka.streams<type=(.+), (.+)=(.+)><>([^:]+)"
    name: kafka_streams_$1_$4
    type: GAUGE
    labels:
      $2: "$3"
  # "kafka.consumer:type=app-info,client-id=*"
  # "kafka.producer:type=app-info,client-id=*"
  - pattern: "kafka.(.+)<type=app-info, client-id=(.+)><>(.+): (.+)"
    value: 1
    name: kafka_$1_app_info
    labels:
      client_type: $1
      client_id: $2
      $3: $4
    type: UNTYPED
  # "kafka.consumer:type=consumer-metrics,client-id=*, protocol=*, cipher=*"
  # "kafka.consumer:type=type=consumer-fetch-manager-metrics,client-id=*, topic=*, partition=*"
  # "kafka.producer:type=producer-metrics,client-id=*, protocol=*, cipher=*"
  - pattern: "kafka.(.+)<type=(.+), (.+)=(.+), (.+)=(.+), (.+)=(.+)><>(.+):"
    name: kafka_$1_$2_$9
    type: GAUGE
    labels:
      client_type: $1
      $3: "$4"
      $5: "$6"
      $7: "$8"
  # "kafka.consumer:type=consumer-node-metrics,client-id=*, node-id=*"
  # "kafka.consumer:type=consumer-fetch-manager-metrics,client-id=*, topic=*"
  # "kafka.producer:type=producer-node-metrics,client-id=*, node-id=*"
  # "kafka.producer:type=producer-topic-metrics,client-id=*, topic=*"
  - pattern: "kafka.(.+)<type=(.+), (.+)=(.+), (.+)=(.+)><>(.+):"
    name: kafka_$1_$2_$7
    type: GAUGE
    labels:
      client_type: $1
      $3: "$4"
      $5: "$6"
  # "kafka.consumer:type=consumer-fetch-manager-metrics,client-id=*"
  # "kafka.consumer:type=consumer-metrics,client-id=*"
  # "kafka.producer:type=producer-metrics,client-id=*"
  - pattern: "kafka.(.+)<type=(.+), (.+)=(.+)><>(.+):"
    name: kafka_$1_$2_$5
    type: GAUGE
    labels:
      client_type: $1
      $3: "$4"
  - pattern: "kafka.(.+)<type=(.+)><>(.+):"
    name: kafka_$1_$2_$3
    labels:
      client_type: $1
# 1
---
lowercaseOutputName: true
rules:
- pattern : kafka.cluster&lt;type=(.+), name=(.+), topic=(.+), partition=(.+)&gt;&lt;&gt;Value
  name: kafka_cluster_$1_$2
  labels:
    topic: "$3"
    partition: "$4"
- pattern : kafka.log&lt;type=Log, name=(.+), topic=(.+), partition=(.+)&gt;&lt;&gt;Value
  name: kafka_log_$1
  labels:
    topic: "$2"
    partition: "$3"
- pattern : kafka.controller&lt;type=(.+), name=(.+)&gt;&lt;&gt;(Count|Value)
  name: kafka_controller_$1_$2
- pattern : kafka.network&lt;type=(.+), name=(.+)&gt;&lt;&gt;Value
  name: kafka_network_$1_$2
- pattern : kafka.network&lt;type=(.+), name=(.+)PerSec, request=(.+)&gt;&lt;&gt;Count
  name: kafka_network_$1_$2_total
  labels:
    request: "$3"
- pattern : kafka.network&lt;type=(.+), name=(\w+), networkProcessor=(.+)&gt;&lt;&gt;Count
  name: kafka_network_$1_$2
  labels:
    request: "$3"
  type: COUNTER
- pattern : kafka.network&lt;type=(.+), name=(\w+), request=(\w+)&gt;&lt;&gt;Count
  name: kafka_network_$1_$2
  labels:
    request: "$3"
- pattern : kafka.network&lt;type=(.+), name=(\w+)&gt;&lt;&gt;Count
  name: kafka_network_$1_$2
- pattern : kafka.server&lt;type=(.+), name=(.+)PerSec\w*, topic=(.+)&gt;&lt;&gt;Count
  name: kafka_server_$1_$2_total
  labels:
    topic: "$3"
- pattern : kafka.server&lt;type=(.+), name=(.+)PerSec\w*&gt;&lt;&gt;Count
  name: kafka_server_$1_$2_total
  type: COUNTER

- pattern : kafka.server&lt;type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)&gt;&lt;&gt;(Count|Value)
  name: kafka_server_$1_$2
  labels:
    clientId: "$3"
    topic: "$4"
    partition: "$5"
- pattern : kafka.server&lt;type=(.+), name=(.+), topic=(.+), partition=(.*)&gt;&lt;&gt;(Count|Value)
  name: kafka_server_$1_$2
  labels:
    topic: "$3"
    partition: "$4"
- pattern : kafka.server&lt;type=(.+), name=(.+), topic=(.+)&gt;&lt;&gt;(Count|Value)
  name: kafka_server_$1_$2
  labels:
    topic: "$3"
  type: COUNTER

- pattern : kafka.server&lt;type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)&gt;&lt;&gt;(Count|Value)
  name: kafka_server_$1_$2
  labels:
    clientId: "$3"
    broker: "$4:$5"
- pattern : kafka.server&lt;type=(.+), name=(.+), clientId=(.+)&gt;&lt;&gt;(Count|Value)
  name: kafka_server_$1_$2
  labels:
    clientId: "$3"
- pattern : kafka.server&lt;type=(.+), name=(.+)&gt;&lt;&gt;(Count|Value)
  name: kafka_server_$1_$2

- pattern : kafka.(\w+)&lt;type=(.+), name=(.+)PerSec\w*&gt;&lt;&gt;Count
  name: kafka_$1_$2_$3_total
- pattern : kafka.(\w+)&lt;type=(.+), name=(.+)PerSec\w*, topic=(.+)&gt;&lt;&gt;Count
  name: kafka_$1_$2_$3_total
  labels:
    topic: "$4"
  type: COUNTER
- pattern : kafka.(\w+)&lt;type=(.+), name=(.+)PerSec\w*, topic=(.+), partition=(.+)&gt;&lt;&gt;Count
  name: kafka_$1_$2_$3_total
  labels:
    topic: "$4"
    partition: "$5"
  type: COUNTER
- pattern : kafka.(\w+)&lt;type=(.+), name=(.+)&gt;&lt;&gt;(Count|Value)
  name: kafka_$1_$2_$3_$4
  type: COUNTER
- pattern : kafka.(\w+)&lt;type=(.+), name=(.+), (\w+)=(.+)&gt;&lt;&gt;(Count|Value)
  name: kafka_$1_$2_$3_$6
  labels:
    "$4": "$5"
    
# 2
---
lowercaseOutputName: true

rules:
# Special cases and very specific rules
- pattern : kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value
  name: kafka_server_$1_$2
  type: GAUGE
  labels:
    clientId: "$3"
    topic: "$4"
    partition: "$5"
- pattern : kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value
  name: kafka_server_$1_$2
  type: GAUGE
  labels:
    clientId: "$3"
    broker: "$4:$5"
- pattern : kafka.coordinator.(\w+)<type=(.+), name=(.+)><>Value
  name: kafka_coordinator_$1_$2_$3
  type: GAUGE

# Generic per-second counters with 0-2 key/value pairs
- pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+), (.+)=(.+)><>Count
  name: kafka_$1_$2_$3_total
  type: COUNTER
  labels:
    "$4": "$5"
    "$6": "$7"
- pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+)><>Count
  name: kafka_$1_$2_$3_total
  type: COUNTER
  labels:
    "$4": "$5"
- pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*><>Count
  name: kafka_$1_$2_$3_total
  type: COUNTER

- pattern: kafka.server<type=(.+), client-id=(.+)><>([a-z-]+)
  name: kafka_server_quota_$3
  type: GAUGE
  labels:
    resource: "$1"
    clientId: "$2"

- pattern: kafka.server<type=(.+), user=(.+), client-id=(.+)><>([a-z-]+)
  name: kafka_server_quota_$4
  type: GAUGE
  labels:
    resource: "$1"
    user: "$2"
    clientId: "$3"

# Generic gauges with 0-2 key/value pairs
- pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Value
  name: kafka_$1_$2_$3
  type: GAUGE
  labels:
    "$4": "$5"
    "$6": "$7"
- pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Value
  name: kafka_$1_$2_$3
  type: GAUGE
  labels:
    "$4": "$5"
- pattern: kafka.(\w+)<type=(.+), name=(.+)><>Value
  name: kafka_$1_$2_$3
  type: GAUGE

# Emulate Prometheus 'Summary' metrics for the exported 'Histogram's.
#
# Note that these are missing the '_sum' metric!
- pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Count
  name: kafka_$1_$2_$3_count
  type: COUNTER
  labels:
    "$4": "$5"
    "$6": "$7"
- pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*), (.+)=(.+)><>(\d+)thPercentile
  name: kafka_$1_$2_$3
  type: GAUGE
  labels:
    "$4": "$5"
    "$6": "$7"
    quantile: "0.$8"
- pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Count
  name: kafka_$1_$2_$3_count
  type: COUNTER
  labels:
    "$4": "$5"
- pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*)><>(\d+)thPercentile
  name: kafka_$1_$2_$3
  type: GAUGE
  labels:
    "$4": "$5"
    quantile: "0.$6"
- pattern: kafka.(\w+)<type=(.+), name=(.+)><>Count
  name: kafka_$1_$2_$3_count
  type: COUNTER
- pattern: kafka.(\w+)<type=(.+), name=(.+)><>(\d+)thPercentile
  name: kafka_$1_$2_$3
  type: GAUGE
  labels:
    quantile: "0.$4"

